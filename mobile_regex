#!/usr/bin/env python3
import os
import re
import shutil
from multiprocessing import Pool, cpu_count, Manager
from docx import Document
from docx.shared import RGBColor
import xlsxwriter
from tqdm import tqdm

# === CONFIG ===
CHUNK_SIZE    = 2000
INPUT_FILE    = "input.txt"
MOBILE_REGEX  = r"(?<!\d)(?:\+91[\-\s]?|91[\-\s]?|91|0)?([6-9]\d{9})(?!\d)"
OUTPUT_DOCX   = "output_mobile.docx"
OUTPUT_XLSX   = "output_mobile.xlsx"
TEMP_DIR      = "temp_parts"

def split_file():
    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)
    os.makedirs(TEMP_DIR, exist_ok=True)

    total = sum(1 for _ in open(INPUT_FILE, 'r', encoding='utf-8', errors='ignore'))
    with open(INPUT_FILE, 'r', encoding='utf-8', errors='ignore') as infile, \
         tqdm(total=total, desc="Splitting lines", unit="line") as bar:
        buffer, part = [], 0
        for i, line in enumerate(infile, 1):
            buffer.append(line)
            if i % CHUNK_SIZE == 0:
                chunk_path = os.path.join(TEMP_DIR, f"chunk_{part}.txt")
                with open(chunk_path, 'w', encoding='utf-8') as out:
                    out.writelines(buffer)
                buffer, part = [], part + 1
            bar.update(1)
        if buffer:
            chunk_path = os.path.join(TEMP_DIR, f"chunk_{part}.txt")
            with open(chunk_path, 'w', encoding='utf-8') as out:
                out.writelines(buffer)

def process_chunk(args):
    chunk_path, results = args
    pattern = re.compile(MOBILE_REGEX)
    doc = Document()
    data = []

    with open(chunk_path, 'r', encoding='utf-8', errors='ignore') as f:
        for line in f:
            txt = line.rstrip('\n')
            matches = list(pattern.finditer(txt))
            if not matches:
                continue

            # Word: highlight each mobile number in red
            para, last = doc.add_paragraph(), 0
            spans = []
            for m in matches:
                s, e = m.span(1)
                spans.append((s, e))
                if s > last:
                    para.add_run(txt[last:s])
                run = para.add_run(m.group(1))
                run.font.color.rgb = RGBColor(255, 0, 0)
                last = e
            if last < len(txt):
                para.add_run(txt[last:])

            # Collect for Excel: (mobile, full line, spans)
            for m in matches:
                data.append((m.group(1), txt, spans))

    part_id = os.path.basename(chunk_path).split('_')[-1].split('.')[0]
    doc.save(os.path.join(TEMP_DIR, f"chunk_{part_id}.docx"))
    results.append(data)

def merge_word():
    merged = Document()
    files = sorted(f for f in os.listdir(TEMP_DIR) if f.endswith('.docx'))
    for fn in tqdm(files, desc="Merging Word", unit="file"):
        sub = Document(os.path.join(TEMP_DIR, fn))
        for p in sub.paragraphs:
            merged.add_paragraph(p.text)
    merged.save(OUTPUT_DOCX)

def write_excel(all_data):
    wb = xlsxwriter.Workbook(OUTPUT_XLSX)
    ws = wb.add_worksheet()
    red = wb.add_format({'font_color': 'red'})

    for row, (mobile, line, spans) in enumerate(tqdm(all_data, desc="Writing Excel", unit="match")):
        ws.write(row, 0, mobile, red)
        parts, last = [], 0
        for s, e in spans:
            if s > last:
                parts.append(line[last:s])
            parts += [red, line[s:e]]
            last = e
        if last < len(line):
            parts.append(line[last:])
        ws.write_rich_string(row, 1, *parts)

    wb.close()

def main():
    print("=== MOBILE EXTRACTOR (Parallel + Colored Output) ===")
    print("Using regex:", MOBILE_REGEX)

    split_file()

    manager = Manager()
    results = manager.list()
    chunk_files = [
        (os.path.join(TEMP_DIR, f), results)
        for f in os.listdir(TEMP_DIR) if f.endswith('.txt')
    ]

    print("\nProcessing chunks in parallel...")
    with Pool(min(cpu_count(), len(chunk_files))) as pool:
        list(tqdm(pool.imap_unordered(process_chunk, chunk_files),
                  total=len(chunk_files), desc="Chunks"))

    all_data = [item for sub in results for item in sub]
    print(f"\nâœ… Total mobile matches: {len(all_data)}\n")

    merge_word()
    write_excel(all_data)

    shutil.rmtree(TEMP_DIR)
    print("ðŸŽ‰ Done. Outputs:")
    print(f"â†’ {OUTPUT_DOCX}")
    print(f"â†’ {OUTPUT_XLSX}")

if __name__ == '__main__':
    main()
