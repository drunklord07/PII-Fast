import os
import re
import json
import shutil
from multiprocessing import Pool, Manager, cpu_count
from docx import Document
from docx.shared import RGBColor
import xlsxwriter
from tqdm import tqdm

# === CONFIG ===
INPUT_FILE   = "input.txt"
CHUNK_SIZE   = 2000
MOBILE_REGEX = r"(?<!\d)(?:\+91[\-\s]?|91[\-\s]?|91|0)?[6-9]\d{9}(?!\d)"
OUTPUT_DOCX  = "final_output_mobile.docx"
OUTPUT_XLSX  = "final_output_mobile.xlsx"
TEMP_DIR     = "temp_parts"

# === LOAD RECORDS ===
def load_records():
    records = []
    last_id = None
    ct_re = re.compile(r"^CreateTime:(\d+)\s+(.*)$")
    with open(INPUT_FILE, 'r', encoding='utf-8', errors='ignore') as f:
        for raw in f:
            line = raw.rstrip('\r\n')
            m = ct_re.match(line)
            if m and last_id:
                records.append((last_id, m.group(1), m.group(2)))
            elif line.strip():
                last_id = line.strip()
    return records

# === CHUNK RECORDS ===
def chunk_records(records):
    for i in range(0, len(records), CHUNK_SIZE):
        yield records[i:i+CHUNK_SIZE], i // CHUNK_SIZE

# === PROCESS ONE CHUNK ===
def process_chunk(args):
    chunk, idx, result_list = args
    pattern = re.compile(MOBILE_REGEX)
    doc = Document()
    matches_data = []
    recs_seen = recs_with_mobile = 0

    for identifier, ts, payload in chunk:
        recs_seen += 1
        mobiles = list(pattern.finditer(payload))
        if not mobiles:
            continue
        recs_with_mobile += 1

        # try parse JSON and flatten
        flat = {}
        try:
            obj = json.loads(payload)
            def recurse(o, path=""):
                if isinstance(o, dict):
                    for k, v in o.items():
                        newp = f"{path}{k}"
                        if isinstance(v, (dict, list)):
                            recurse(v, newp + ".")
                        else:
                            flat[newp] = v
                elif isinstance(o, list):
                    for i, item in enumerate(o):
                        recurse(item, f"{path}[{i}].")
                # ignore other types
            recurse(obj)
        except json.JSONDecodeError:
            pass

        # build Word paragraph
        para = doc.add_paragraph(f"{identifier} | CreateTime:{ts} | ")
        last = 0
        fields = []
        for mt in mobiles:
            s, e = mt.span()
            if s > last:
                para.add_run(payload[last:s])
            mobile = mt.group()
            run = para.add_run(mobile)
            run.font.color.rgb = RGBColor(255, 0, 0)
            last = e

            # find field via flat map
            field = ""
            for path, val in flat.items():
                if str(val) == mobile:
                    field = path
                    break
            # fallback: regex on raw payload
            if not field:
                fm = re.search(r'"([^"]+)"\s*:\s*' + re.escape(mobile), payload)
                if fm:
                    field = fm.group(1)

            fields.append(field)
            matches_data.append((identifier, ts, payload, mobile, field))

        if last < len(payload):
            para.add_run(payload[last:])

        # append fields in red
        para.add_run(" | field: ")
        for i, fld in enumerate(fields):
            if i:
                para.add_run(", ")
            fr = para.add_run(fld)
            fr.font.color.rgb = RGBColor(255, 0, 0)

    # save Word chunk if matches
    if matches_data:
        os.makedirs(TEMP_DIR, exist_ok=True)
        doc.save(os.path.join(TEMP_DIR, f"chunk_{idx}.docx"))

    result_list.append((matches_data, recs_seen, recs_with_mobile))

# === MERGE WORD CHUNKS ===
def merge_word():
    merged = Document()
    for fn in tqdm(sorted(os.listdir(TEMP_DIR)), desc="Merging Word"):
        if not fn.endswith(".docx"):
            continue
        doc = Document(os.path.join(TEMP_DIR, fn))
        for para in doc.paragraphs:
            np = merged.add_paragraph()
            for run in para.runs:
                nr = np.add_run(run.text)
                if run.font.color and run.font.color.rgb:
                    nr.font.color.rgb = run.font.color.rgb
                nr.bold = run.bold; nr.italic = run.italic; nr.underline = run.underline
    merged.save(OUTPUT_DOCX)

# === WRITE EXCEL ===
def write_excel(all_matches):
    wb = xlsxwriter.Workbook(OUTPUT_XLSX)
    ws = wb.add_worksheet()
    red = wb.add_format({'font_color': 'red'})

    ws.write_row(0, 0, ["Identifier","Timestamp","Payload","Mobile","Field"])
    row = 1
    for identifier, ts, payload, mobile, field in all_matches:
        ws.write(row, 0, identifier)
        ws.write(row, 1, ts)
        ws.write(row, 2, payload)
        ws.write(row, 3, mobile, red)
        ws.write(row, 4, field)
        row += 1
    wb.close()

# === MAIN ===
if __name__ == "__main__":
    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)

    print("=== MOBILE EXTRACTOR w/ FIELD NAMES ===")
    records = load_records()
    print(f"Total records found: {len(records)}")
    chunks = list(chunk_records(records))

    manager = Manager()
    results = manager.list()
    with Pool(min(cpu_count(), len(chunks))) as pool:
        list(tqdm(pool.imap_unordered(
            process_chunk,
            [(chunk, idx, results) for chunk, idx in chunks]
        ), total=len(chunks), desc="Processing chunks"))

    # aggregate
    all_matches = []
    tot = has = 0
    for data, recs, with_mobile in results:
        all_matches.extend(data)
        tot += recs
        has += with_mobile

    print(f"Records scanned: {tot}, with mobile: {has}, matches: {len(all_matches)}")

    if os.path.isdir(TEMP_DIR):
        merge_word()
    write_excel(all_matches)

    shutil.rmtree(TEMP_DIR)
    print(f"\n→ Word saved to {OUTPUT_DOCX}")
    print(f"→ Excel saved to {OUTPUT_XLSX}")
