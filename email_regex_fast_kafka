#!/usr/bin/env python3
import re
import os
import sys
import argparse
import shutil
from tqdm import tqdm
from docx import Document
from docx.shared import RGBColor
import xlsxwriter

# ——— LOG LINE PARSER ———
LOG_PATTERN = re.compile(
    r'^(?P<timestamp>\d{4}/\d{2}/\d{2}\s+\d{2}:\d{2}:\d{2}\.\d{3})\s+'
    r'(?P<level>INFO|WARN|ERROR|DEBUG)\s+'
    r'\[(?P<processor>[^\]]+)\]\s+'
    r'\[(?P<thread>[^\]]+)\]\s+'
    r'\[(?P<server>[^\]]+)\]\s+'
    r'\[(?P<context>[^\]]*)\]\s*'
    r'(?P<message>.*)$'
)

EMAIL_REGEX = re.compile(
    r'(?<![\w@.-])'
    r'([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,})'
    r'(?![\w@.-])'
)

def scan_file(input_file):
    results = []
    with open(input_file, 'r', encoding='utf-8', errors='ignore') as f:
        total = sum(1 for _ in f)
    with open(input_file, 'r', encoding='utf-8', errors='ignore') as f, \
         tqdm(total=total, desc="Scanning", unit="line") as bar:
        for lineno, raw in enumerate(f, 1):
            bar.update(1)
            line = raw.rstrip('\n')
            m = LOG_PATTERN.match(line)
            if not m:
                continue
            gd = m.groupdict()
            msg = gd['message']
            for em in EMAIL_REGEX.finditer(msg):
                s, e = em.span(1)
                results.append({
                    **gd,
                    'lineno': lineno,
                    'email': em.group(1),
                    'msg_span': (s, e),
                    'msg_text': msg
                })
    return results

def save_excel(results, out_path):
    wb = xlsxwriter.Workbook(out_path)
    ws = wb.add_worksheet()
    red = wb.add_format({'font_color': 'red'})

    headers = ["line","timestamp","level","processor","thread","server","context","email","message"]
    for c, h in enumerate(headers):
        ws.write(0, c, h)

    for r, rec in enumerate(results, start=1):
        ws.write(r, 0, rec['lineno'])
        ws.write(r, 1, rec['timestamp'])
        ws.write(r, 2, rec['level'])
        ws.write(r, 3, rec['processor'])
        ws.write(r, 4, rec['thread'])
        ws.write(r, 5, rec['server'])
        ws.write(r, 6, rec['context'])
        ws.write(r, 7, rec['email'], red)

        parts = []
        s, e = rec['msg_span']
        msg = rec['msg_text']
        if s > 0:
            parts.append(msg[:s])
        parts += [red, msg[s:e]]
        if e < len(msg):
            parts.append(msg[e:])
        ws.write_rich_string(r, 8, *parts)

    wb.close()

def save_word(results, out_path):
    doc = Document()
    for rec in results:
        para = doc.add_paragraph(f"[{rec['lineno']}] ")
        before  = rec['msg_text'][:rec['msg_span'][0]]
        match   = rec['email']
        after   = rec['msg_text'][rec['msg_span'][1]:]
        para.add_run(before)
        run = para.add_run(match)
        run.font.color.rgb = RGBColor(255, 0, 0)
        para.add_run(after)
    doc.save(out_path)

def main():
    parser = argparse.ArgumentParser(
        description="Scan Kafka logs for emails → .docx + .xlsx"
    )
    parser.add_argument(
        'input_file',
        nargs='?',
        default='input_file.txt',
        help="Path to your Kafka log (default: input_file.txt)"
    )
    parser.add_argument(
        '--output-dir',
        default='outputs',
        help="Where to write output files"
    )
    args = parser.parse_args()

    # ——— check that the input file actually exists ———
    if not os.path.isfile(args.input_file):
        sys.exit(f"❌ Error: input file '{args.input_file}' not found. "
                 "Please provide a valid path, e.g.\n  python3 script.py path/to/your.log")

    # Optional: clear old outputs
    if os.path.isdir(args.output_dir):
        shutil.rmtree(args.output_dir)
    os.makedirs(args.output_dir, exist_ok=True)

    results = scan_file(args.input_file)
    print(f"\n✅ Found {len(results)} emails.\n")

    excel_path = os.path.join(args.output_dir, 'output_email.xlsx')
    word_path  = os.path.join(args.output_dir, 'output_email.docx')

    save_excel(results, excel_path)
    save_word(results, word_path)

    print(f"→ Excel: {excel_path}")
    print(f"→ Word : {word_path}")

if __name__ == '__main__':
    main()

